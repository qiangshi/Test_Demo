package com.supermap.demo.test.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_DB".
*/
public class FavoriteDBDao extends AbstractDao<FavoriteDB, Long> {

    public static final String TABLENAME = "FAVORITE_DB";

    /**
     * Properties of entity FavoriteDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property FavoriteType = new Property(2, int.class, "favoriteType", false, "FAVORITE_TYPE");
        public final static Property SaveTime = new Property(3, long.class, "saveTime", false, "SAVE_TIME");
        public final static Property FavoriteId = new Property(4, String.class, "favoriteId", false, "FAVORITE_ID");
    }


    public FavoriteDBDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"FAVORITE_TYPE\" INTEGER NOT NULL ," + // 2: favoriteType
                "\"SAVE_TIME\" INTEGER NOT NULL ," + // 3: saveTime
                "\"FAVORITE_ID\" TEXT);"); // 4: favoriteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavoriteDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getFavoriteType());
        stmt.bindLong(4, entity.getSaveTime());
 
        String favoriteId = entity.getFavoriteId();
        if (favoriteId != null) {
            stmt.bindString(5, favoriteId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavoriteDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getFavoriteType());
        stmt.bindLong(4, entity.getSaveTime());
 
        String favoriteId = entity.getFavoriteId();
        if (favoriteId != null) {
            stmt.bindString(5, favoriteId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FavoriteDB readEntity(Cursor cursor, int offset) {
        FavoriteDB entity = new FavoriteDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getInt(offset + 2), // favoriteType
            cursor.getLong(offset + 3), // saveTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // favoriteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavoriteDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFavoriteType(cursor.getInt(offset + 2));
        entity.setSaveTime(cursor.getLong(offset + 3));
        entity.setFavoriteId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FavoriteDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FavoriteDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FavoriteDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
