package com.supermap.demo.test.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_DB".
*/
public class HistoryDBDao extends AbstractDao<HistoryDB, Long> {

    public static final String TABLENAME = "HISTORY_DB";

    /**
     * Properties of entity HistoryDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property SearchTime = new Property(2, long.class, "searchTime", false, "SEARCH_TIME");
        public final static Property HistoryType = new Property(3, int.class, "historyType", false, "HISTORY_TYPE");
        public final static Property DataId = new Property(4, int.class, "dataId", false, "DATA_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
        public final static Property CoordX = new Property(7, double.class, "coordX", false, "COORD_X");
        public final static Property CoordY = new Property(8, double.class, "coordY", false, "COORD_Y");
        public final static Property Mix = new Property(9, String.class, "mix", false, "MIX");
        public final static Property Bid = new Property(10, int.class, "bid", false, "BID");
        public final static Property IsPoiItem = new Property(11, boolean.class, "isPoiItem", false, "IS_POI_ITEM");
        public final static Property Label = new Property(12, String.class, "label", false, "LABEL");
    }


    public HistoryDBDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"SEARCH_TIME\" INTEGER NOT NULL ," + // 2: searchTime
                "\"HISTORY_TYPE\" INTEGER NOT NULL ," + // 3: historyType
                "\"DATA_ID\" INTEGER NOT NULL ," + // 4: dataId
                "\"NAME\" TEXT," + // 5: name
                "\"CATEGORY\" TEXT," + // 6: category
                "\"COORD_X\" REAL NOT NULL ," + // 7: coordX
                "\"COORD_Y\" REAL NOT NULL ," + // 8: coordY
                "\"MIX\" TEXT," + // 9: mix
                "\"BID\" INTEGER NOT NULL ," + // 10: bid
                "\"IS_POI_ITEM\" INTEGER NOT NULL ," + // 11: isPoiItem
                "\"LABEL\" TEXT);"); // 12: label
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getSearchTime());
        stmt.bindLong(4, entity.getHistoryType());
        stmt.bindLong(5, entity.getDataId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
        stmt.bindDouble(8, entity.getCoordX());
        stmt.bindDouble(9, entity.getCoordY());
 
        String mix = entity.getMix();
        if (mix != null) {
            stmt.bindString(10, mix);
        }
        stmt.bindLong(11, entity.getBid());
        stmt.bindLong(12, entity.getIsPoiItem() ? 1L: 0L);
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(13, label);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getSearchTime());
        stmt.bindLong(4, entity.getHistoryType());
        stmt.bindLong(5, entity.getDataId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
        stmt.bindDouble(8, entity.getCoordX());
        stmt.bindDouble(9, entity.getCoordY());
 
        String mix = entity.getMix();
        if (mix != null) {
            stmt.bindString(10, mix);
        }
        stmt.bindLong(11, entity.getBid());
        stmt.bindLong(12, entity.getIsPoiItem() ? 1L: 0L);
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(13, label);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryDB readEntity(Cursor cursor, int offset) {
        HistoryDB entity = new HistoryDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getLong(offset + 2), // searchTime
            cursor.getInt(offset + 3), // historyType
            cursor.getInt(offset + 4), // dataId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // category
            cursor.getDouble(offset + 7), // coordX
            cursor.getDouble(offset + 8), // coordY
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mix
            cursor.getInt(offset + 10), // bid
            cursor.getShort(offset + 11) != 0, // isPoiItem
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // label
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearchTime(cursor.getLong(offset + 2));
        entity.setHistoryType(cursor.getInt(offset + 3));
        entity.setDataId(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoordX(cursor.getDouble(offset + 7));
        entity.setCoordY(cursor.getDouble(offset + 8));
        entity.setMix(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBid(cursor.getInt(offset + 10));
        entity.setIsPoiItem(cursor.getShort(offset + 11) != 0);
        entity.setLabel(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
